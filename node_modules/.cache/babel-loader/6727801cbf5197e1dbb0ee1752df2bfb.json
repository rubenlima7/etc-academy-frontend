{"ast":null,"code":"'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMapLength && charCodeB < alphabetIndexMapLength && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  if (aIndex >= lengthA && bIndex < lengthB && lengthA >= lengthB) {\n    return -1;\n  }\n\n  if (bIndex >= lengthB && aIndex < lengthA && lengthB >= lengthA) {\n    return 1;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function (a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function get() {\n      return alphabet;\n    },\n    set: function set(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    }\n  }\n});\nmodule.exports = naturalCompare;","map":{"version":3,"names":["alphabet","alphabetIndexMap","alphabetIndexMapLength","isNumberCode","code","naturalCompare","a","b","lengthA","length","lengthB","aIndex","bIndex","charCodeA","charCodeAt","charCodeB","numStartA","numStartB","numEndA","numEndB","difference","caseInsensitive","i","toLowerCase","Object","defineProperties","get","set","value","undefined","module","exports"],"sources":["C:/Users/LÃ­lia/Documents/Cloud AWS/0_Projecto/etc-academy-frontend/node_modules/list.js/node_modules/string-natural-compare/natural-compare.js"],"sourcesContent":["'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (\n        charCodeA < alphabetIndexMapLength &&\n        charCodeB < alphabetIndexMapLength &&\n        alphabetIndexMap[charCodeA] !== -1 &&\n        alphabetIndexMap[charCodeB] !== -1\n      ) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  if (aIndex >= lengthA && bIndex < lengthB && lengthA >= lengthB) {\n    return -1;\n  }\n\n  if (bIndex >= lengthB && aIndex < lengthA && lengthB >= lengthA) {\n    return 1;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function(a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function() {\n      return alphabet;\n    },\n\n    set: function(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    },\n  },\n});\n\nmodule.exports = naturalCompare;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}